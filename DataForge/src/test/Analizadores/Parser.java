
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package test.analizadores;

import Errores.Error_;
import dataforge.Editor;
import java_cup.runtime.*;
import hashMap.variables;
import java.util.ArrayList;
import graficas.graphPie;
import graficas.graphLine;
import graficas.Histograma;
import graficas.graphBar;
import Graficas.objetopie;
import Graficas.objetoline;
import Graficas.objetobar;
import java.util.HashMap;
import Graficas.objetohisto;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\005\005\000\002\002\004\000\002\006" +
    "\003\000\002\006\004\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\002\014\000\002\002" +
    "\014\000\002\003\003\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\024\012\000\002\010\005\000" +
    "\002\010\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\013\017\000\002\013\017\000\002\027" +
    "\005\000\002\027\003\000\002\011\005\000\002\011\003" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\022\021\000\002\022\021\000\002" +
    "\022\021\000\002\022\021\000\002\022\021\000\002\031" +
    "\002\000\002\032\002\000\002\033\002\000\002\034\002" +
    "\000\002\035\002\000\002\036\002\000\002\020\075\000" +
    "\002\037\002\000\002\040\002\000\002\041\002\000\002" +
    "\042\002\000\002\025\053\000\002\043\002\000\002\044" +
    "\002\000\002\045\002\000\002\046\002\000\002\025\053" +
    "\000\002\047\002\000\002\050\002\000\002\051\002\000" +
    "\002\052\002\000\002\053\002\000\002\054\002\000\002" +
    "\026\075\000\002\055\002\000\002\056\002\000\002\057" +
    "\002\000\002\016\040\000\002\021\015\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016f\000\004\054\005\001\002\000\004\002\u0171\001" +
    "\002\000\020\006\027\011\012\020\025\033\024\034\026" +
    "\043\016\056\021\001\002\000\022\006\uffff\011\uffff\020" +
    "\uffff\033\uffff\034\uffff\043\uffff\055\uffff\056\uffff\001\002" +
    "\000\022\006\ufffb\011\ufffb\020\ufffb\033\ufffb\034\ufffb\043" +
    "\ufffb\055\ufffb\056\ufffb\001\002\000\022\006\ufffd\011\ufffd" +
    "\020\ufffd\033\ufffd\034\ufffd\043\ufffd\055\ufffd\056\ufffd\001" +
    "\002\000\022\006\ufff9\011\ufff9\020\ufff9\033\ufff9\034\ufff9" +
    "\043\ufff9\055\ufff9\056\ufff9\001\002\000\004\050\u0154\001" +
    "\002\000\022\006\ufff5\011\ufff5\020\ufff5\033\ufff5\034\ufff5" +
    "\043\ufff5\055\ufff5\056\ufff5\001\002\000\022\006\ufffa\011" +
    "\ufffa\020\ufffa\033\ufffa\034\ufffa\043\ufffa\055\ufffa\056\ufffa" +
    "\001\002\000\022\006\027\011\012\020\025\033\024\034" +
    "\026\043\016\055\u0153\056\021\001\002\000\004\050\u013c" +
    "\001\002\000\022\006\ufff8\011\ufff8\020\ufff8\033\ufff8\034" +
    "\ufff8\043\ufff8\055\ufff8\056\ufff8\001\002\000\022\006\ufff4" +
    "\011\ufff4\020\ufff4\033\ufff4\034\ufff4\043\ufff4\055\ufff4\056" +
    "\ufff4\001\002\000\004\030\355\001\002\000\022\006\ufffc" +
    "\011\ufffc\020\ufffc\033\ufffc\034\ufffc\043\ufffc\055\ufffc\056" +
    "\ufffc\001\002\000\022\006\ufff6\011\ufff6\020\ufff6\033\ufff6" +
    "\034\ufff6\043\ufff6\055\ufff6\056\ufff6\001\002\000\004\030" +
    "\263\001\002\000\004\030\166\001\002\000\004\030\126" +
    "\001\002\000\004\050\031\001\002\000\022\006\ufff7\011" +
    "\ufff7\020\ufff7\033\ufff7\034\ufff7\043\ufff7\055\ufff7\056\ufff7" +
    "\001\002\000\006\004\033\005\032\001\002\000\004\050" +
    "\045\001\002\000\004\050\034\001\002\000\004\050\035" +
    "\001\002\000\004\052\036\001\002\000\004\010\037\001" +
    "\002\000\006\052\042\053\041\001\002\000\004\007\043" +
    "\001\002\000\012\007\uffee\021\uffee\022\uffee\032\uffee\001" +
    "\002\000\012\007\uffef\021\uffef\022\uffef\032\uffef\001\002" +
    "\000\004\047\044\001\002\000\022\006\ufff2\011\ufff2\020" +
    "\ufff2\033\ufff2\034\ufff2\043\ufff2\055\ufff2\056\ufff2\001\002" +
    "\000\004\050\046\001\002\000\004\052\047\001\002\000" +
    "\004\010\050\001\002\000\020\023\053\024\051\025\054" +
    "\026\056\027\052\051\057\052\060\001\002\000\004\030" +
    "\117\001\002\000\004\030\110\001\002\000\004\030\101" +
    "\001\002\000\004\030\072\001\002\000\004\007\070\001" +
    "\002\000\004\030\061\001\002\000\012\007\ufff1\022\ufff1" +
    "\031\ufff1\032\ufff1\001\002\000\012\007\ufff0\022\ufff0\031" +
    "\ufff0\032\ufff0\001\002\000\006\051\057\052\060\001\002" +
    "\000\004\032\063\001\002\000\006\051\057\052\060\001" +
    "\002\000\004\031\065\001\002\000\004\007\066\001\002" +
    "\000\004\047\067\001\002\000\022\006\uffda\011\uffda\020" +
    "\uffda\033\uffda\034\uffda\043\uffda\055\uffda\056\uffda\001\002" +
    "\000\004\047\071\001\002\000\022\006\ufff3\011\ufff3\020" +
    "\ufff3\033\ufff3\034\ufff3\043\ufff3\055\ufff3\056\ufff3\001\002" +
    "\000\006\051\057\052\060\001\002\000\004\032\074\001" +
    "\002\000\006\051\057\052\060\001\002\000\004\031\076" +
    "\001\002\000\004\007\077\001\002\000\004\047\100\001" +
    "\002\000\022\006\uffdb\011\uffdb\020\uffdb\033\uffdb\034\uffdb" +
    "\043\uffdb\055\uffdb\056\uffdb\001\002\000\006\051\057\052" +
    "\060\001\002\000\004\032\103\001\002\000\006\051\057" +
    "\052\060\001\002\000\004\031\105\001\002\000\004\007" +
    "\106\001\002\000\004\047\107\001\002\000\022\006\uffdd" +
    "\011\uffdd\020\uffdd\033\uffdd\034\uffdd\043\uffdd\055\uffdd\056" +
    "\uffdd\001\002\000\006\051\057\052\060\001\002\000\004" +
    "\032\112\001\002\000\006\051\057\052\060\001\002\000" +
    "\004\031\114\001\002\000\004\007\115\001\002\000\004" +
    "\047\116\001\002\000\022\006\uffd9\011\uffd9\020\uffd9\033" +
    "\uffd9\034\uffd9\043\uffd9\055\uffd9\056\uffd9\001\002\000\006" +
    "\051\057\052\060\001\002\000\004\032\121\001\002\000" +
    "\006\051\057\052\060\001\002\000\004\031\123\001\002" +
    "\000\004\007\124\001\002\000\004\047\125\001\002\000" +
    "\022\006\uffdc\011\uffdc\020\uffdc\033\uffdc\034\uffdc\043\uffdc" +
    "\055\uffdc\056\uffdc\001\002\000\004\061\127\001\002\000" +
    "\004\050\130\001\002\000\004\050\131\001\002\000\004" +
    "\004\132\001\002\000\004\046\133\001\002\000\004\053" +
    "\134\001\002\000\004\007\135\001\002\000\004\047\136" +
    "\001\002\000\004\060\uffc0\001\002\000\004\060\140\001" +
    "\002\000\004\050\141\001\002\000\004\050\142\001\002" +
    "\000\004\004\143\001\002\000\004\046\144\001\002\000" +
    "\004\013\145\001\002\000\006\052\042\053\041\001\002" +
    "\000\006\022\uffde\032\uffde\001\002\000\006\022\151\032" +
    "\150\001\002\000\006\052\042\053\041\001\002\000\004" +
    "\007\152\001\002\000\004\047\153\001\002\000\004\062" +
    "\uffbf\001\002\000\004\062\155\001\002\000\004\034\156" +
    "\001\002\000\004\007\157\001\002\000\004\047\160\001" +
    "\002\000\004\031\uffbe\001\002\000\004\031\162\001\002" +
    "\000\004\007\163\001\002\000\004\047\164\001\002\000" +
    "\022\006\uffbd\011\uffbd\020\uffbd\033\uffbd\034\uffbd\043\uffbd" +
    "\055\uffbd\056\uffbd\001\002\000\006\022\uffdf\032\uffdf\001" +
    "\002\000\004\061\167\001\002\000\004\050\170\001\002" +
    "\000\004\050\171\001\002\000\004\004\172\001\002\000" +
    "\004\046\173\001\002\000\004\053\174\001\002\000\004" +
    "\007\175\001\002\000\004\047\176\001\002\000\004\014" +
    "\uffd8\001\002\000\004\014\200\001\002\000\004\050\201" +
    "\001\002\000\004\050\202\001\002\000\004\004\203\001" +
    "\002\000\004\046\204\001\002\000\004\013\205\001\002" +
    "\000\006\052\042\053\041\001\002\000\006\022\207\032" +
    "\150\001\002\000\004\007\210\001\002\000\004\047\211" +
    "\001\002\000\004\015\uffd7\001\002\000\004\015\213\001" +
    "\002\000\004\050\214\001\002\000\004\050\215\001\002" +
    "\000\004\005\216\001\002\000\004\046\217\001\002\000" +
    "\004\013\220\001\002\000\006\051\057\052\060\001\002" +
    "\000\006\022\224\032\223\001\002\000\006\022\uffe0\032" +
    "\uffe0\001\002\000\006\051\057\052\060\001\002\000\004" +
    "\007\225\001\002\000\004\047\226\001\002\000\004\016" +
    "\uffd6\001\002\000\004\016\230\001\002\000\004\050\231" +
    "\001\002\000\004\050\232\001\002\000\004\004\233\001" +
    "\002\000\004\046\234\001\002\000\004\053\235\001\002" +
    "\000\004\007\236\001\002\000\004\047\237\001\002\000" +
    "\004\017\uffd5\001\002\000\004\017\241\001\002\000\004" +
    "\050\242\001\002\000\004\050\243\001\002\000\004\004" +
    "\244\001\002\000\004\046\245\001\002\000\004\053\246" +
    "\001\002\000\004\007\247\001\002\000\004\047\250\001" +
    "\002\000\004\062\uffd4\001\002\000\004\062\252\001\002" +
    "\000\004\020\253\001\002\000\004\007\254\001\002\000" +
    "\004\047\255\001\002\000\004\031\uffd3\001\002\000\004" +
    "\031\257\001\002\000\004\007\260\001\002\000\004\047" +
    "\261\001\002\000\022\006\uffd2\011\uffd2\020\uffd2\033\uffd2" +
    "\034\uffd2\043\uffd2\055\uffd2\056\uffd2\001\002\000\006\022" +
    "\uffe1\032\uffe1\001\002\000\004\061\264\001\002\000\004" +
    "\050\265\001\002\000\004\050\266\001\002\000\004\004" +
    "\267\001\002\000\004\046\270\001\002\000\004\053\271" +
    "\001\002\000\004\007\272\001\002\000\004\047\273\001" +
    "\002\000\004\014\uffc7\001\002\000\004\014\275\001\002" +
    "\000\004\050\276\001\002\000\004\050\277\001\002\000" +
    "\004\004\300\001\002\000\004\046\301\001\002\000\004" +
    "\013\302\001\002\000\006\052\042\053\041\001\002\000" +
    "\006\022\304\032\150\001\002\000\004\007\305\001\002" +
    "\000\004\047\306\001\002\000\004\015\uffc6\001\002\000" +
    "\004\015\310\001\002\000\004\050\311\001\002\000\004" +
    "\050\312\001\002\000\004\005\313\001\002\000\004\046" +
    "\314\001\002\000\004\013\315\001\002\000\006\051\057" +
    "\052\060\001\002\000\006\022\317\032\223\001\002\000" +
    "\004\007\320\001\002\000\004\047\321\001\002\000\004" +
    "\016\uffc5\001\002\000\004\016\323\001\002\000\004\050" +
    "\324\001\002\000\004\050\325\001\002\000\004\004\326" +
    "\001\002\000\004\046\327\001\002\000\004\053\330\001" +
    "\002\000\004\007\331\001\002\000\004\047\332\001\002" +
    "\000\004\017\uffc4\001\002\000\004\017\334\001\002\000" +
    "\004\050\335\001\002\000\004\050\336\001\002\000\004" +
    "\004\337\001\002\000\004\046\340\001\002\000\004\053" +
    "\341\001\002\000\004\007\342\001\002\000\004\047\343" +
    "\001\002\000\004\062\uffc3\001\002\000\004\062\345\001" +
    "\002\000\004\033\346\001\002\000\004\007\347\001\002" +
    "\000\004\047\350\001\002\000\004\031\uffc2\001\002\000" +
    "\004\031\352\001\002\000\004\007\353\001\002\000\004" +
    "\047\354\001\002\000\022\006\uffc1\011\uffc1\020\uffc1\033" +
    "\uffc1\034\uffc1\043\uffc1\055\uffc1\056\uffc1\001\002\000\006" +
    "\057\357\060\356\001\002\000\004\050\u0116\001\002\000" +
    "\004\050\360\001\002\000\004\050\361\001\002\000\004" +
    "\004\362\001\002\000\004\046\363\001\002\000\004\013" +
    "\364\001\002\000\006\052\042\053\041\001\002\000\006" +
    "\022\366\032\150\001\002\000\004\007\367\001\002\000" +
    "\004\047\370\001\002\000\004\060\uffd1\001\002\000\004" +
    "\060\372\001\002\000\004\050\373\001\002\000\004\050" +
    "\374\001\002\000\004\005\375\001\002\000\004\046\376" +
    "\001\002\000\004\013\377\001\002\000\006\051\057\052" +
    "\060\001\002\000\006\022\u0101\032\223\001\002\000\004" +
    "\007\u0102\001\002\000\004\047\u0103\001\002\000\004\061" +
    "\uffd0\001\002\000\004\061\u0105\001\002\000\004\050\u0106" +
    "\001\002\000\004\050\u0107\001\002\000\004\004\u0108\001" +
    "\002\000\004\046\u0109\001\002\000\004\053\u010a\001\002" +
    "\000\004\007\u010b\001\002\000\004\047\u010c\001\002\000" +
    "\004\062\uffcf\001\002\000\004\062\u010e\001\002\000\004" +
    "\056\u010f\001\002\000\004\007\u0110\001\002\000\004\047" +
    "\u0111\001\002\000\004\031\uffce\001\002\000\004\031\u0113" +
    "\001\002\000\004\007\u0114\001\002\000\004\047\u0115\001" +
    "\002\000\022\006\uffcd\011\uffcd\020\uffcd\033\uffcd\034\uffcd" +
    "\043\uffcd\055\uffcd\056\uffcd\001\002\000\004\050\u0117\001" +
    "\002\000\004\005\u0118\001\002\000\004\046\u0119\001\002" +
    "\000\004\013\u011a\001\002\000\006\051\057\052\060\001" +
    "\002\000\006\022\u011c\032\223\001\002\000\004\007\u011d" +
    "\001\002\000\004\047\u011e\001\002\000\004\057\uffcc\001" +
    "\002\000\004\057\u0120\001\002\000\004\050\u0121\001\002" +
    "\000\004\050\u0122\001\002\000\004\004\u0123\001\002\000" +
    "\004\046\u0124\001\002\000\004\013\u0125\001\002\000\006" +
    "\052\042\053\041\001\002\000\006\022\u0127\032\150\001" +
    "\002\000\004\007\u0128\001\002\000\004\047\u0129\001\002" +
    "\000\004\061\uffcb\001\002\000\004\061\u012b\001\002\000" +
    "\004\050\u012c\001\002\000\004\050\u012d\001\002\000\004" +
    "\004\u012e\001\002\000\004\046\u012f\001\002\000\004\053" +
    "\u0130\001\002\000\004\007\u0131\001\002\000\004\047\u0132" +
    "\001\002\000\004\062\uffca\001\002\000\004\062\u0134\001" +
    "\002\000\004\056\u0135\001\002\000\004\007\u0136\001\002" +
    "\000\004\047\u0137\001\002\000\004\031\uffc9\001\002\000" +
    "\004\031\u0139\001\002\000\004\007\u013a\001\002\000\004" +
    "\047\u013b\001\002\000\022\006\uffc8\011\uffc8\020\uffc8\033" +
    "\uffc8\034\uffc8\043\uffc8\055\uffc8\056\uffc8\001\002\000\004" +
    "\050\u013d\001\002\000\006\044\u013f\045\u013e\001\002\000" +
    "\004\046\u014a\001\002\000\004\046\u0140\001\002\000\010" +
    "\051\u0144\052\u0145\053\u0142\001\002\000\006\007\uffeb\032" +
    "\uffeb\001\002\000\006\007\uffea\032\uffea\001\002\000\006" +
    "\007\u0147\032\u0146\001\002\000\006\007\uffe8\032\uffe8\001" +
    "\002\000\006\007\uffe9\032\uffe9\001\002\000\010\051\u0144" +
    "\052\u0145\053\u0142\001\002\000\004\047\u0148\001\002\000" +
    "\022\006\uffed\011\uffed\020\uffed\033\uffed\034\uffed\043\uffed" +
    "\055\uffed\056\uffed\001\002\000\006\007\uffec\032\uffec\001" +
    "\002\000\006\052\042\053\041\001\002\000\004\021\u014c" +
    "\001\002\000\004\012\u014d\001\002\000\004\052\u014f\001" +
    "\002\000\004\007\u0150\001\002\000\004\007\uffbb\001\002" +
    "\000\004\047\u0151\001\002\000\022\006\uffbc\011\uffbc\020" +
    "\uffbc\033\uffbc\034\uffbc\043\uffbc\055\uffbc\056\uffbc\001\002" +
    "\000\022\006\ufffe\011\ufffe\020\ufffe\033\ufffe\034\ufffe\043" +
    "\ufffe\055\ufffe\056\ufffe\001\002\000\004\002\001\001\002" +
    "\000\006\004\u0156\005\u0155\001\002\000\004\050\u0164\001" +
    "\002\000\004\050\u0157\001\002\000\004\050\u0158\001\002" +
    "\000\004\012\u0159\001\002\000\004\052\u015a\001\002\000" +
    "\004\010\u015b\001\002\000\004\013\u015c\001\002\000\006" +
    "\052\042\053\041\001\002\000\006\022\uffe2\032\uffe2\001" +
    "\002\000\006\022\u0160\032\u015f\001\002\000\006\052\042" +
    "\053\041\001\002\000\004\007\u0161\001\002\000\004\047" +
    "\u0162\001\002\000\022\006\uffe6\011\uffe6\020\uffe6\033\uffe6" +
    "\034\uffe6\043\uffe6\055\uffe6\056\uffe6\001\002\000\006\022" +
    "\uffe3\032\uffe3\001\002\000\004\050\u0165\001\002\000\004" +
    "\012\u0166\001\002\000\004\052\u0167\001\002\000\004\010" +
    "\u0168\001\002\000\004\013\u0169\001\002\000\006\051\057" +
    "\052\060\001\002\000\006\022\u016d\032\u016c\001\002\000" +
    "\006\022\uffe4\032\uffe4\001\002\000\006\051\057\052\060" +
    "\001\002\000\004\007\u016e\001\002\000\004\047\u016f\001" +
    "\002\000\022\006\uffe7\011\uffe7\020\uffe7\033\uffe7\034\uffe7" +
    "\043\uffe7\055\uffe7\056\uffe7\001\002\000\006\022\uffe5\032" +
    "\uffe5\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016f\000\004\005\003\001\001\000\002\001\001\000" +
    "\032\002\007\006\014\007\005\013\021\016\027\020\022" +
    "\021\017\022\006\023\013\024\010\025\016\026\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\007\007\u0151\013\021\016\027" +
    "\020\022\021\017\022\006\023\013\024\010\025\016\026" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\061\001\001\000\002\001" +
    "\001\000\004\003\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\072\001\001\000\002" +
    "\001\001\000\004\003\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\101\001\001\000\002\001\001\000\004\003\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\110\001\001\000\002\001" +
    "\001\000\004\003\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\117\001\001\000\002\001\001\000\004\003\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\145\015\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\145\015\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\221\014" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\145\015\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\221\014\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\350\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\145\015\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\370\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\221\014\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\u010c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\221\014\u011a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u011e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\145\015\u0125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\u0129\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\u0132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\u0142\017\u0140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u0148\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u014a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u014d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\u015c\011\u015d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\u016a" +
    "\027\u0169\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u016f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static StringBuilder STR = new StringBuilder();
    public ArrayList <String> elementosParaImprimir = new ArrayList <String>();
    public ArrayList <Object> elemX = new ArrayList<>();
    public ArrayList <Object> elemY = new ArrayList<>();
    public static ArrayList <objetopie> atributospie = new ArrayList<>();
    public static ArrayList <objetoline> atributoslinea = new ArrayList<>();
    public static ArrayList <objetobar> atributosbar = new ArrayList<>();
    public static ArrayList <objetohisto> atributoshisto = new ArrayList<>();
    public static ArrayList<Object> elementos_arreglo = new ArrayList<>();
    public static HashMap <String, ArrayList<Object>> brrrr = new HashMap<>();



    variables hashVariables = new variables();

    public void syntax_error(Symbol s){
        //System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
        Error_ miError = new Error_(s.left,s.right,s.value.toString(),false);
        Editor.lista_errores.add(miError);
}
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       // System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
        Error_ miError = new Error_(s.left,s.right,s.value.toString(),false);
        Editor.lista_errores.add(miError);    
}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicializarPrograma ::= PROGRAM codigo ENDPROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializarPrograma",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicializarPrograma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= codigo comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comandos ::= declararVariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comandos ::= declararArreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comandos ::= declararAritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comandos ::= declararEstadisticas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comandos ::= declararPrint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comandos ::= declararGraficaPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comandos ::= declararGraficaHistograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comandos ::= declararGraficaBar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comandos ::= declararGraficaLine 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comandos ::= imprimirArreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declararVariable ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD declararDouble END PUNTOCOMA 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		hashVariables.setVariable(name, contenido);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariable",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declararVariable ::= VAR DOSPUNTOS CHAR DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD declararChar END PUNTOCOMA 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		hashVariables.setVariable(name, contenido);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariable",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declararDouble ::= DECIMAL 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Double.parseDouble(x);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararDouble",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declararDouble ::= CARACTERES 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = hashVariables.getVariable(var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararDouble",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declararChar ::= CARACTERES 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = hashVariables.getVariable(var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararChar",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declararChar ::= CHARCOMILLAS 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ((String) texto);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararChar",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declararPrint ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL listaImprimir END PUNTOCOMA 
            {
              Object RESULT =null;
		int cadenasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadenasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cadenas = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

STR.append("\n");
for (String elemento : elementosParaImprimir){
    STR.append(elemento.toString());
    STR.append(", ");
}
if (!elementosParaImprimir.isEmpty()){
    STR.setLength(STR.length() - 2);
}
                                    
elementosParaImprimir.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararPrint",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaImprimir ::= listaImprimir COMA todo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 elementosParaImprimir.add(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaImprimir",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaImprimir ::= todo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 elementosParaImprimir.add(a.toString() ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaImprimir",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // todo ::= CHARCOMILLAS 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ((String) texto.substring(1, texto.length () - 1)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // todo ::= CARACTERES 
            {
              Object RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = hashVariables.getVariable(variable); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // todo ::= DECIMAL 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declararArreglos ::= ARR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS ARROBA CARACTERES IGUALDAD CORCHETEIZ elemArrayDouble CORCHETEDE END PUNTOCOMA 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String arreglo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = elementos_arreglo;
                                        ArrayList<Object> nuevosElementos = new ArrayList<>(elementos_arreglo);
                                        brrrr.put(arreglo, nuevosElementos); 
                                        elementos_arreglo.clear();
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararArreglos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declararArreglos ::= ARR DOSPUNTOS CHAR DOSPUNTOS DOSPUNTOS ARROBA CARACTERES IGUALDAD CORCHETEIZ elemArrayChar CORCHETEDE END PUNTOCOMA 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String arreglo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = elementos_arreglo;
                                        System.out.println("IMPRIMIENDO EL NOMBRE DEL ARREGLO EN LA PRODUCCION PRINCIPAL: "+arreglo);
                                        ArrayList<Object> nuevosElementos = new ArrayList<>(elementos_arreglo);
                                        brrrr.put(arreglo, nuevosElementos); 
                                        elementos_arreglo.clear();
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararArreglos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // elemArrayDouble ::= elemArrayDouble COMA declararDouble 
            {
              Object RESULT =null;
		int elemento_doubleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elemento_doubleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elemento_double = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 elementos_arreglo.add((Double) elemento_double); 
                                            RESULT = elementos_arreglo;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemArrayDouble",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // elemArrayDouble ::= declararDouble 
            {
              Object RESULT =null;
		int elemento_doubleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elemento_doubleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elemento_double = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 elementos_arreglo.add((Double) elemento_double);  
                                            RESULT = elementos_arreglo;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemArrayDouble",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elemArrayChar ::= elemArrayChar COMA declararChar 
            {
              Object RESULT =null;
		int elemento_charleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elemento_charright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elemento_char = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 elementos_arreglo.add( (String) elemento_char); 
                                            RESULT = elementos_arreglo;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemArrayChar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elemArrayChar ::= declararChar 
            {
              Object RESULT =null;
		int elemento_charleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elemento_charright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elemento_char = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 elementos_arreglo.add( (String) elemento_char); 
                                        RESULT = elementos_arreglo;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elemArrayChar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaArreglosDouble ::= listaArreglosDouble COMA declararDouble 
            {
              Object RESULT =null;
		int elementosDoubleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elementosDoubleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elementosDouble = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		elemY.add((Double) elementosDouble); RESULT = elemY; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArreglosDouble",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaArreglosDouble ::= declararDouble 
            {
              Object RESULT =null;
		int elementosDoubleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elementosDoubleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elementosDouble = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		elemY.add((Double) elementosDouble); RESULT = elemY; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArreglosDouble",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaArreglosChar ::= listaArreglosChar COMA declararChar 
            {
              Object RESULT =null;
		int elementosCharleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elementosCharright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elementosChar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		elemX.add( (String) elementosChar); RESULT = elemX;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArreglosChar",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaArreglosChar ::= declararChar 
            {
              Object RESULT =null;
		int elementosCharleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elementosCharright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elementosChar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		elemX.add( (String) elementosChar); RESULT = elemX;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArreglosChar",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declararAritmetica ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD SUM PARENTESISIZ declararDouble COMA declararDouble PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
 RESULT = ((Double) x) + ((Double) y); 
hashVariables.setVariable(name, RESULT);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararAritmetica",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declararAritmetica ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD RES PARENTESISIZ declararDouble COMA declararDouble PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
 RESULT = ((Double) x) - ((Double) y); 
hashVariables.setVariable(name, RESULT);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararAritmetica",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declararAritmetica ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD MUL PARENTESISIZ declararDouble COMA declararDouble PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
 RESULT = ((Double) x) * ((Double) y); 
hashVariables.setVariable(name, RESULT);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararAritmetica",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declararAritmetica ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD DIV PARENTESISIZ declararDouble COMA declararDouble PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
  RESULT = ((Double) x) / ((Double) y); 
hashVariables.setVariable(name, RESULT);                   

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararAritmetica",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declararAritmetica ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD MOD PARENTESISIZ declararDouble COMA declararDouble PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
 RESULT = ((Double) x) % ((Double) y); 
hashVariables.setVariable(name, RESULT);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararAritmetica",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$0 ::= 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
RESULT = titulo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 RESULT = elementosX;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int elementosYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elementosYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elementosY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 RESULT = elementosY;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-33)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-33)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-33)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int elementosYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int elementosYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object elementosY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tituloXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tituloX = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 RESULT = tituloX;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-42)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-42)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-42)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-32)).value;
		int elementosYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).left;
		int elementosYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).right;
		Object elementosY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-21)).value;
		int tituloXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tituloXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String tituloX = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tituloYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tituloY = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 RESULT = tituloY;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-47)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-37)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-37)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-37)).value;
		int elementosYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-26)).left;
		int elementosYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-26)).right;
		Object elementosY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-26)).value;
		int tituloXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int tituloXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		String tituloX = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int tituloYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tituloYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String tituloY = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;

    objetobar barras = new objetobar((String) titulo, (String) tituloX, (String) tituloY, (ArrayList<Object>) elementosX, (ArrayList<Object>) elementosY);
    atributosbar.add(barras);
    graphBar generar = new graphBar();
    generar.generarGrafica();
    elemX.clear();
    elemY.clear();
    atributosbar.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declararGraficaBar ::= GRAPHBAR PARENTESISIZ TITULO DOSPUNTOS DOSPUNTOS CHAR IGUAL CHARCOMILLAS END PUNTOCOMA NT$0 EJEX DOSPUNTOS DOSPUNTOS CHAR IGUAL CORCHETEIZ listaArreglosChar CORCHETEDE END PUNTOCOMA NT$1 EJEY DOSPUNTOS DOSPUNTOS DOUBLE IGUAL CORCHETEIZ listaArreglosDouble CORCHETEDE END PUNTOCOMA NT$2 TITULOX DOSPUNTOS DOSPUNTOS CHAR IGUAL CHARCOMILLAS END PUNTOCOMA NT$3 TITULOY DOSPUNTOS DOSPUNTOS CHAR IGUAL CHARCOMILLAS END PUNTOCOMA NT$4 EXEC GRAPHBAR END PUNTOCOMA NT$5 PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-51)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-51)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-51)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-41)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-41)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-41)).value;
		int elementosYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).left;
		int elementosYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).right;
		Object elementosY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-30)).value;
		int tituloXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).left;
		int tituloXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).right;
		String tituloX = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-20)).value;
		int tituloYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tituloYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String tituloY = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararGraficaBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-58)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$6 ::= 
            {
              Object RESULT =null;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 RESULT = elementos; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 RESULT = valores; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 RESULT = titulo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-28)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;

        objetopie pie = new objetopie((String) titulo, (ArrayList<Object>) elementos, (ArrayList<Object>) valores);
        atributospie.add(pie);
        graphPie generar = new graphPie();
        generar.generarGrafica();
        elemX.clear();
        elemY.clear();
        atributospie.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declararGraficaPie ::= GRAPHPIE PARENTESISIZ LABEL DOSPUNTOS DOSPUNTOS CHAR IGUAL CORCHETEIZ listaArreglosChar CORCHETEDE END PUNTOCOMA NT$6 VALUES DOSPUNTOS DOSPUNTOS DOUBLE IGUAL CORCHETEIZ listaArreglosDouble CORCHETEDE END PUNTOCOMA NT$7 TITULO DOSPUNTOS DOSPUNTOS CHAR IGUAL CHARCOMILLAS END PUNTOCOMA NT$8 EXEC GRAPHPIE END PUNTOCOMA NT$9 PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-32)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-21)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararGraficaPie",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-40)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$10 ::= 
            {
              Object RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 RESULT = valores; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 RESULT = elementos; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 RESULT = titulo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-28)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;

            objetopie pie = new objetopie((String) titulo, (ArrayList<Object>) elementos, (ArrayList<Object>) valores);
            atributospie.add(pie);
            graphPie generar = new graphPie();
            generar.generarGrafica();
            elemX.clear();
            elemY.clear();
            atributospie.clear();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declararGraficaPie ::= GRAPHPIE PARENTESISIZ VALUES DOSPUNTOS DOSPUNTOS DOUBLE IGUAL CORCHETEIZ listaArreglosDouble CORCHETEDE END PUNTOCOMA NT$10 LABEL DOSPUNTOS DOSPUNTOS CHAR IGUAL CORCHETEIZ listaArreglosChar CORCHETEDE END PUNTOCOMA NT$11 TITULO DOSPUNTOS DOSPUNTOS CHAR IGUAL CHARCOMILLAS END PUNTOCOMA NT$12 EXEC GRAPHPIE END PUNTOCOMA NT$13 PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).right;
		Object valores = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-32)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-21)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararGraficaPie",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-40)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$14 ::= 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
RESULT = titulo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 RESULT = elementosX;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int elementosYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elementosYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elementosY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 RESULT = elementosY;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-33)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-33)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-33)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int elementosYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int elementosYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object elementosY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tituloXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tituloX = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 RESULT = tituloX;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-42)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-42)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-42)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-32)).value;
		int elementosYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).left;
		int elementosYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).right;
		Object elementosY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-21)).value;
		int tituloXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tituloXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String tituloX = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tituloYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tituloY = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 RESULT = tituloY;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-47)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-37)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-37)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-37)).value;
		int elementosYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-26)).left;
		int elementosYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-26)).right;
		Object elementosY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-26)).value;
		int tituloXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int tituloXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		String tituloX = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int tituloYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tituloYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String tituloY = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;

    objetoline linea = new objetoline((String) titulo, (String) tituloX, (String) tituloY, (ArrayList<Object>) elementosX, (ArrayList<Object>) elementosY);
    atributoslinea.add(linea);
    graphLine generar = new graphLine();
    generar.generarGrafica();
    elemX.clear();
    elemY.clear();
    atributoslinea.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declararGraficaLine ::= GRAPHLINE PARENTESISIZ TITULO DOSPUNTOS DOSPUNTOS CHAR IGUAL CHARCOMILLAS END PUNTOCOMA NT$14 EJEX DOSPUNTOS DOSPUNTOS CHAR IGUAL CORCHETEIZ listaArreglosChar CORCHETEDE END PUNTOCOMA NT$15 EJEY DOSPUNTOS DOSPUNTOS DOUBLE IGUAL CORCHETEIZ listaArreglosDouble CORCHETEDE END PUNTOCOMA NT$16 TITULOX DOSPUNTOS DOSPUNTOS CHAR IGUAL CHARCOMILLAS END PUNTOCOMA NT$17 TITULOY DOSPUNTOS DOSPUNTOS CHAR IGUAL CHARCOMILLAS END PUNTOCOMA NT$18 EXEC GRAPHLINE END PUNTOCOMA NT$19 PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-51)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-51)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-51)).value;
		int elementosXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-41)).left;
		int elementosXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-41)).right;
		Object elementosX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-41)).value;
		int elementosYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).left;
		int elementosYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).right;
		Object elementosY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-30)).value;
		int tituloXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).left;
		int tituloXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).right;
		String tituloX = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-20)).value;
		int tituloYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tituloYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String tituloY = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararGraficaLine",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-58)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$20 ::= 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
RESULT = titulo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
 RESULT = elementos;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-18)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;

    objetohisto histo = new objetohisto((String) titulo, (ArrayList<Object>) elementos);
    atributoshisto.add(histo);
    Histograma generar = new Histograma();
    generar.generarGrafica();
    elemX.clear();
    elemY.clear();
    atributoshisto.clear();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declararGraficaHistograma ::= HISTOGRAMA PARENTESISIZ TITULO DOSPUNTOS DOSPUNTOS CHAR IGUAL CHARCOMILLAS END PUNTOCOMA NT$20 VALUES DOSPUNTOS DOSPUNTOS CHAR IGUAL CORCHETEIZ listaArreglosChar CORCHETEDE END PUNTOCOMA NT$21 EXEC HISTOGRAMA END PUNTOCOMA NT$22 PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).right;
		String titulo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-22)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object elementos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararGraficaHistograma",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // imprimirArreglos ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL declararChar IGUALDAD2 ARROBA opsArreglos END PUNTOCOMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                            ArrayList <Object> arregloLista = brrrr.get(name);

                            STR.append("-------------------\n");
                            STR.append(titulo+"\n");
                            STR.append("-------------------\n");
                            
                           for (Object elemento : arregloLista){
                                        STR.append(elemento.toString());
                                        STR.append("\n");
                            }

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimirArreglos",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opsArreglos ::= CARACTERES 
            {
              Object RESULT =null;
		int nombreArregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nombreArregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String nombreArreglo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nombreArreglo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opsArreglos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
