
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package test.analizadores;

import Errores.Error_;
import dataforge.Editor;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\005\005\000\002\002\004\000\002\006" +
    "\003\000\002\006\004\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\002\014\000\002\002\014\000\002" +
    "\003\003\000\002\003\003\000\002\004\003\000\002\004" +
    "\003\000\002\010\017\000\002\010\017\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\012\003\000" +
    "\002\013\021\000\002\013\021\000\002\013\021\000\002" +
    "\013\021\000\002\013\021\000\002\014\021\000\002\014" +
    "\021\000\002\014\021\000\002\014\021\000\002\014\021" +
    "\000\002\014\021\000\002\015\012\000\002\016\047" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\044\005\001\002\000\004\002\311\001" +
    "\002\000\012\006\011\011\006\033\014\046\021\001\002" +
    "\000\004\040\262\001\002\000\014\006\ufff9\011\ufff9\033" +
    "\ufff9\045\ufff9\046\ufff9\001\002\000\014\006\ufffd\011\ufffd" +
    "\033\ufffd\045\ufffd\046\ufffd\001\002\000\004\040\111\001" +
    "\002\000\014\006\ufffb\011\ufffb\033\ufffb\045\ufffb\046\ufffb" +
    "\001\002\000\014\006\ufff8\011\ufff8\033\ufff8\045\ufff8\046" +
    "\ufff8\001\002\000\004\040\102\001\002\000\014\006\ufffc" +
    "\011\ufffc\033\ufffc\045\ufffc\046\ufffc\001\002\000\014\006" +
    "\uffff\011\uffff\033\uffff\045\uffff\046\uffff\001\002\000\014" +
    "\006\011\011\006\033\014\045\101\046\021\001\002\000" +
    "\014\006\ufffa\011\ufffa\033\ufffa\045\ufffa\046\ufffa\001\002" +
    "\000\004\022\022\001\002\000\004\047\023\001\002\000" +
    "\004\040\024\001\002\000\004\040\025\001\002\000\004" +
    "\004\026\001\002\000\004\036\027\001\002\000\004\013" +
    "\030\001\002\000\006\042\034\043\032\001\002\000\010" +
    "\007\uffec\014\uffec\024\uffec\001\002\000\010\007\ufff2\014" +
    "\ufff2\024\ufff2\001\002\000\006\014\036\024\035\001\002" +
    "\000\010\007\ufff3\014\ufff3\024\ufff3\001\002\000\006\042" +
    "\034\043\032\001\002\000\004\007\037\001\002\000\004" +
    "\037\040\001\002\000\004\050\041\001\002\000\004\040" +
    "\042\001\002\000\004\040\043\001\002\000\004\005\044" +
    "\001\002\000\004\036\045\001\002\000\004\013\046\001" +
    "\002\000\006\041\051\042\052\001\002\000\006\014\054" +
    "\024\053\001\002\000\006\014\uffee\024\uffee\001\002\000" +
    "\012\007\ufff5\014\ufff5\023\ufff5\024\ufff5\001\002\000\012" +
    "\007\ufff4\014\ufff4\023\ufff4\024\ufff4\001\002\000\006\041" +
    "\051\042\052\001\002\000\004\007\055\001\002\000\004" +
    "\037\056\001\002\000\004\051\057\001\002\000\004\040" +
    "\060\001\002\000\004\040\061\001\002\000\004\004\062" +
    "\001\002\000\004\036\063\001\002\000\004\043\064\001" +
    "\002\000\004\007\065\001\002\000\004\037\066\001\002" +
    "\000\004\052\067\001\002\000\004\046\070\001\002\000" +
    "\004\007\071\001\002\000\004\037\072\001\002\000\004" +
    "\023\073\001\002\000\004\007\074\001\002\000\004\037" +
    "\075\001\002\000\014\006\uffdf\011\uffdf\033\uffdf\045\uffdf" +
    "\046\uffdf\001\002\000\006\014\uffef\024\uffef\001\002\000" +
    "\010\007\uffed\014\uffed\024\uffed\001\002\000\014\006\ufffe" +
    "\011\ufffe\033\ufffe\045\ufffe\046\ufffe\001\002\000\004\002" +
    "\001\001\002\000\004\040\103\001\002\000\004\034\104" +
    "\001\002\000\004\036\105\001\002\000\006\042\034\043" +
    "\032\001\002\000\006\007\107\024\035\001\002\000\004" +
    "\037\110\001\002\000\014\006\uffe0\011\uffe0\033\uffe0\045" +
    "\uffe0\046\uffe0\001\002\000\006\004\113\005\112\001\002" +
    "\000\004\040\123\001\002\000\004\040\114\001\002\000" +
    "\004\040\115\001\002\000\004\042\116\001\002\000\004" +
    "\010\117\001\002\000\006\042\034\043\032\001\002\000" +
    "\004\007\121\001\002\000\004\037\122\001\002\000\014" +
    "\006\ufff6\011\ufff6\033\ufff6\045\ufff6\046\ufff6\001\002\000" +
    "\004\040\124\001\002\000\004\042\125\001\002\000\004" +
    "\010\126\001\002\000\034\015\130\016\131\017\141\020" +
    "\136\021\133\025\137\026\127\027\135\030\134\031\132" +
    "\032\142\041\051\042\052\001\002\000\004\022\253\001" +
    "\002\000\004\022\244\001\002\000\004\022\235\001\002" +
    "\000\004\022\226\001\002\000\004\022\217\001\002\000" +
    "\004\022\210\001\002\000\004\022\201\001\002\000\004" +
    "\022\172\001\002\000\004\022\163\001\002\000\004\007" +
    "\161\001\002\000\004\022\152\001\002\000\004\022\143" +
    "\001\002\000\004\013\144\001\002\000\006\041\051\042" +
    "\052\001\002\000\006\014\146\024\053\001\002\000\004" +
    "\023\147\001\002\000\004\007\150\001\002\000\004\037" +
    "\151\001\002\000\014\006\uffe1\011\uffe1\033\uffe1\045\uffe1" +
    "\046\uffe1\001\002\000\006\041\051\042\052\001\002\000" +
    "\004\024\154\001\002\000\006\041\051\042\052\001\002" +
    "\000\004\023\156\001\002\000\004\007\157\001\002\000" +
    "\004\037\160\001\002\000\014\006\uffe9\011\uffe9\033\uffe9" +
    "\045\uffe9\046\uffe9\001\002\000\004\037\162\001\002\000" +
    "\014\006\ufff7\011\ufff7\033\ufff7\045\ufff7\046\ufff7\001\002" +
    "\000\004\013\164\001\002\000\006\041\051\042\052\001" +
    "\002\000\006\014\166\024\053\001\002\000\004\023\167" +
    "\001\002\000\004\007\170\001\002\000\004\037\171\001" +
    "\002\000\014\006\uffe6\011\uffe6\033\uffe6\045\uffe6\046\uffe6" +
    "\001\002\000\006\041\051\042\052\001\002\000\004\024" +
    "\174\001\002\000\006\041\051\042\052\001\002\000\004" +
    "\023\176\001\002\000\004\007\177\001\002\000\004\037" +
    "\200\001\002\000\014\006\uffe8\011\uffe8\033\uffe8\045\uffe8" +
    "\046\uffe8\001\002\000\004\013\202\001\002\000\006\041" +
    "\051\042\052\001\002\000\006\014\204\024\053\001\002" +
    "\000\004\023\205\001\002\000\004\007\206\001\002\000" +
    "\004\037\207\001\002\000\014\006\uffe4\011\uffe4\033\uffe4" +
    "\045\uffe4\046\uffe4\001\002\000\004\013\211\001\002\000" +
    "\006\041\051\042\052\001\002\000\006\014\213\024\053" +
    "\001\002\000\004\023\214\001\002\000\004\007\215\001" +
    "\002\000\004\037\216\001\002\000\014\006\uffe3\011\uffe3" +
    "\033\uffe3\045\uffe3\046\uffe3\001\002\000\006\041\051\042" +
    "\052\001\002\000\004\024\221\001\002\000\006\041\051" +
    "\042\052\001\002\000\004\023\223\001\002\000\004\007" +
    "\224\001\002\000\004\037\225\001\002\000\014\006\uffe7" +
    "\011\uffe7\033\uffe7\045\uffe7\046\uffe7\001\002\000\004\013" +
    "\227\001\002\000\006\041\051\042\052\001\002\000\006" +
    "\014\231\024\053\001\002\000\004\023\232\001\002\000" +
    "\004\007\233\001\002\000\004\037\234\001\002\000\014" +
    "\006\uffe2\011\uffe2\033\uffe2\045\uffe2\046\uffe2\001\002\000" +
    "\006\041\051\042\052\001\002\000\004\024\237\001\002" +
    "\000\006\041\051\042\052\001\002\000\004\023\241\001" +
    "\002\000\004\007\242\001\002\000\004\037\243\001\002" +
    "\000\014\006\uffea\011\uffea\033\uffea\045\uffea\046\uffea\001" +
    "\002\000\006\041\051\042\052\001\002\000\004\024\246" +
    "\001\002\000\006\041\051\042\052\001\002\000\004\023" +
    "\250\001\002\000\004\007\251\001\002\000\004\037\252" +
    "\001\002\000\014\006\uffeb\011\uffeb\033\uffeb\045\uffeb\046" +
    "\uffeb\001\002\000\004\013\254\001\002\000\006\041\051" +
    "\042\052\001\002\000\006\014\256\024\053\001\002\000" +
    "\004\023\257\001\002\000\004\007\260\001\002\000\004" +
    "\037\261\001\002\000\014\006\uffe5\011\uffe5\033\uffe5\045" +
    "\uffe5\046\uffe5\001\002\000\006\004\264\005\263\001\002" +
    "\000\004\040\277\001\002\000\004\040\265\001\002\000" +
    "\004\040\266\001\002\000\004\012\267\001\002\000\004" +
    "\042\270\001\002\000\004\010\271\001\002\000\004\013" +
    "\272\001\002\000\006\042\034\043\032\001\002\000\006" +
    "\014\274\024\035\001\002\000\004\007\275\001\002\000" +
    "\004\037\276\001\002\000\014\006\ufff0\011\ufff0\033\ufff0" +
    "\045\ufff0\046\ufff0\001\002\000\004\040\300\001\002\000" +
    "\004\012\301\001\002\000\004\042\302\001\002\000\004" +
    "\010\303\001\002\000\004\013\304\001\002\000\006\041" +
    "\051\042\052\001\002\000\006\014\306\024\053\001\002" +
    "\000\004\007\307\001\002\000\004\037\310\001\002\000" +
    "\014\006\ufff1\011\ufff1\033\ufff1\045\ufff1\046\ufff1\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\005\003\001\001\000\002\001\001\000" +
    "\022\002\007\006\016\007\015\010\014\013\011\014\017" +
    "\015\006\016\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\007\007\077\010\014\013\011" +
    "\014\017\015\006\016\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\030\012\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\047\011\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\030\012\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\047\011\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\152\001\001\000\002\001\001\000" +
    "\004\003\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\047\011\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\172" +
    "\001\001\000\002\001\001\000\004\003\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\047\011\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\047\011\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\217\001\001\000\002\001\001\000\004" +
    "\003\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\047\011\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\235\001\001\000\002\001\001\000\004\003" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\244\001\001\000" +
    "\002\001\001\000\004\003\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\047\011\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\030\012\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\047\011\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        //System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
        Error_ miError = new Error_(s.left,s.right,s.value.toString(),false);
        Editor.lista_errores.add(miError);
}
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       // System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
        Error_ miError = new Error_(s.left,s.right,s.value.toString(),false);
        Editor.lista_errores.add(miError);    
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicializarPrograma ::= PROGRAM codigo ENDPROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicializarPrograma",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicializarPrograma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= codigo comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comandos ::= declararVariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comandos ::= declararArreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comandos ::= declararAritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comandos ::= declararEstadisticas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comandos ::= declararPrint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comandos ::= declararGraficas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declararVariable ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD declararDouble END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariable",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declararVariable ::= VAR DOSPUNTOS CHAR DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD declararChar END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariable",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declararDouble ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararDouble",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declararDouble ::= CARACTERES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararDouble",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declararChar ::= CARACTERES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararChar",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declararChar ::= CHARCOMILLAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararChar",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declararArreglos ::= ARR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS ARROBA CARACTERES IGUALDAD CORCHETEIZ listaArreglosDouble CORCHETEDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararArreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declararArreglos ::= ARR DOSPUNTOS CHAR DOSPUNTOS DOSPUNTOS ARROBA CARACTERES IGUALDAD CORCHETEIZ listaArreglosChar CORCHETEDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararArreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listaArreglosDouble ::= listaArreglosDouble COMA declararDouble 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArreglosDouble",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listaArreglosDouble ::= declararDouble 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArreglosDouble",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listaArreglosChar ::= listaArreglosChar COMA declararChar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArreglosChar",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaArreglosChar ::= declararChar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArreglosChar",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declararAritmetica ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD SUM PARENTESISIZ declararDouble COMA declararDouble PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararAritmetica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declararAritmetica ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD RES PARENTESISIZ declararDouble COMA declararDouble PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararAritmetica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declararAritmetica ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD MUL PARENTESISIZ declararDouble COMA declararDouble PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararAritmetica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declararAritmetica ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD DIV PARENTESISIZ declararDouble COMA declararDouble PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararAritmetica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declararAritmetica ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD MOD PARENTESISIZ declararDouble COMA declararDouble PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararAritmetica",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declararEstadisticas ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD MEDIA PARENTESISIZ CORCHETEIZ listaArreglosDouble CORCHETEDE PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararEstadisticas",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declararEstadisticas ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD MEDIANA PARENTESISIZ CORCHETEIZ listaArreglosDouble CORCHETEDE PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararEstadisticas",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declararEstadisticas ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD MODA PARENTESISIZ CORCHETEIZ listaArreglosDouble CORCHETEDE PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararEstadisticas",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declararEstadisticas ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD VARIANZA PARENTESISIZ CORCHETEIZ listaArreglosDouble CORCHETEDE PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararEstadisticas",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declararEstadisticas ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD MAX PARENTESISIZ CORCHETEIZ listaArreglosDouble CORCHETEDE PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararEstadisticas",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declararEstadisticas ::= VAR DOSPUNTOS DOUBLE DOSPUNTOS DOSPUNTOS CARACTERES IGUALDAD MIN PARENTESISIZ CORCHETEIZ listaArreglosDouble CORCHETEDE PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararEstadisticas",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declararPrint ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL listaArreglosChar END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararPrint",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declararGraficas ::= GRAPHPIE PARENTESISIZ LABEL DOSPUNTOS DOSPUNTOS CHAR IGUAL CORCHETEIZ listaArreglosChar CORCHETEDE END PUNTOCOMA VALUES DOSPUNTOS DOSPUNTOS DOUBLE IGUAL CORCHETEIZ listaArreglosDouble CORCHETEDE END PUNTOCOMA TITULO DOSPUNTOS DOSPUNTOS CHAR IGUAL CHARCOMILLAS END PUNTOCOMA EXEC GRAPHPIE END PUNTOCOMA PARENTESISDE END PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararGraficas",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
